//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Practise_Ych_06._25
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LeasingCompany_2Entities : DbContext
    {
        public LeasingCompany_2Entities()
            : base("name=LeasingCompany_2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Addresses> Addresses { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Insurance> Insurance { get; set; }
        public virtual DbSet<LeasingContracts> LeasingContracts { get; set; }
        public virtual DbSet<Maintenance> Maintenance { get; set; }
        public virtual DbSet<Payments> Payments { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<vw_ActiveContractsWithDetails> vw_ActiveContractsWithDetails { get; set; }
        public virtual DbSet<vw_ProductFinancialAnalytics> vw_ProductFinancialAnalytics { get; set; }
    
        [DbFunction("LeasingCompany_2Entities", "fn_CalculateProjectedRevenue")]
        public virtual IQueryable<fn_CalculateProjectedRevenue_Result> fn_CalculateProjectedRevenue(Nullable<int> months)
        {
            var monthsParameter = months.HasValue ?
                new ObjectParameter("months", months) :
                new ObjectParameter("months", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_CalculateProjectedRevenue_Result>("[LeasingCompany_2Entities].[fn_CalculateProjectedRevenue](@months)", monthsParameter);
        }
    
        public virtual int sp_CompleteLeasingContract(Nullable<int> contract_id, ObjectParameter result, ObjectParameter message)
        {
            var contract_idParameter = contract_id.HasValue ?
                new ObjectParameter("contract_id", contract_id) :
                new ObjectParameter("contract_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompleteLeasingContract", contract_idParameter, result, message);
        }
    
        public virtual int sp_CreateLeasingContract(Nullable<int> client_id, Nullable<int> product_id, Nullable<System.DateTime> start_date, Nullable<System.DateTime> end_date, Nullable<decimal> monthly_payment, Nullable<int> sales_rep_id, ObjectParameter result, ObjectParameter message)
        {
            var client_idParameter = client_id.HasValue ?
                new ObjectParameter("client_id", client_id) :
                new ObjectParameter("client_id", typeof(int));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var start_dateParameter = start_date.HasValue ?
                new ObjectParameter("start_date", start_date) :
                new ObjectParameter("start_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new ObjectParameter("end_date", end_date) :
                new ObjectParameter("end_date", typeof(System.DateTime));
    
            var monthly_paymentParameter = monthly_payment.HasValue ?
                new ObjectParameter("monthly_payment", monthly_payment) :
                new ObjectParameter("monthly_payment", typeof(decimal));
    
            var sales_rep_idParameter = sales_rep_id.HasValue ?
                new ObjectParameter("sales_rep_id", sales_rep_id) :
                new ObjectParameter("sales_rep_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateLeasingContract", client_idParameter, product_idParameter, start_dateParameter, end_dateParameter, monthly_paymentParameter, sales_rep_idParameter, result, message);
        }
    
        public virtual int sp_MoveProductToMaintenance(Nullable<int> product_id, string maintenance_type, Nullable<decimal> cost, string description, string performed_by, ObjectParameter result, ObjectParameter message)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var maintenance_typeParameter = maintenance_type != null ?
                new ObjectParameter("maintenance_type", maintenance_type) :
                new ObjectParameter("maintenance_type", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var performed_byParameter = performed_by != null ?
                new ObjectParameter("performed_by", performed_by) :
                new ObjectParameter("performed_by", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoveProductToMaintenance", product_idParameter, maintenance_typeParameter, costParameter, descriptionParameter, performed_byParameter, result, message);
        }
    
        public virtual int sp_UpdateProductValue(Nullable<int> product_id, Nullable<decimal> new_value, ObjectParameter result, ObjectParameter message)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var new_valueParameter = new_value.HasValue ?
                new ObjectParameter("new_value", new_value) :
                new ObjectParameter("new_value", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateProductValue", product_idParameter, new_valueParameter, result, message);
        }
    }
}
